package com.pensio.backend.ioc;

import com.pensio.backend.controllers.BackendController;
import com.pensio.backend.model.IModelFactory;
import com.pensio.backend.model.Inventory;
import com.pensio.backend.model.OrderLine;
import com.pensio.backend.model.Product;
import com.pensio.backend.model.ShopOrder;
import com.pensio.backend.repositories.ShopOrderRepository;

import java.util.Arrays;
import java.util.UUID;

public class BackendContainer implements IModelFactory {

    private ShopOrderRepository shopOrderRepository;

    public BackendController getBackendController() {
        return new BackendController(null);
    }

    /**
     * Instantiates a singleton ShopOrderRepository instance per BackendContainer instance
     *
     * @return ShopOrderRepository
     */
    public ShopOrderRepository getShopOrderRepository() {

        if (shopOrderRepository == null) {
            synchronized (ShopOrderRepository.class) {
                if (shopOrderRepository == null) {
                    shopOrderRepository = new ShopOrderRepository(this);
                }
            }
        }
        return shopOrderRepository;
    }

    @Override
    public ShopOrder getShopOrder() {
        ShopOrder shopOrder = new ShopOrder();
        shopOrder.setId(UUID.randomUUID().toString());
        shopOrder.setPaymentId(UUID.randomUUID().toString());
        shopOrder.setOrderLines(Arrays.asList(getOrderLine()));
        return shopOrder;
    }

    @Override
    public Inventory getInventory() {
        Inventory inventory = new Inventory();
        inventory.setInventory(10);
        inventory.setProduct(getProduct());
        return inventory;
    }

    @Override
    public OrderLine getOrderLine() {
        OrderLine orderLine = new OrderLine();
        orderLine.setProduct(getProduct());
        orderLine.setQuantity(1);
        return orderLine;
    }

    @Override
    public Product getProduct() {
        // TODO: initialize a new Product with it's dependencies
        return null;
    }

}
